/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/debates/[id]/route";
exports.ids = ["app/api/debates/[id]/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdebates%2F%5Bid%5D%2Froute&page=%2Fapi%2Fdebates%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdebates%2F%5Bid%5D%2Froute.ts&appDir=D%3A%5CwebDev%20Projects%5Clive-ai-debate-arena(Incomplete)%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CwebDev%20Projects%5Clive-ai-debate-arena(Incomplete)&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdebates%2F%5Bid%5D%2Froute&page=%2Fapi%2Fdebates%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdebates%2F%5Bid%5D%2Froute.ts&appDir=D%3A%5CwebDev%20Projects%5Clive-ai-debate-arena(Incomplete)%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CwebDev%20Projects%5Clive-ai-debate-arena(Incomplete)&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_webDev_Projects_live_ai_debate_arena_Incomplete_src_app_api_debates_id_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/debates/[id]/route.ts */ \"(rsc)/./src/app/api/debates/[id]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/debates/[id]/route\",\n        pathname: \"/api/debates/[id]\",\n        filename: \"route\",\n        bundlePath: \"app/api/debates/[id]/route\"\n    },\n    resolvedPagePath: \"D:\\\\webDev Projects\\\\live-ai-debate-arena(Incomplete)\\\\src\\\\app\\\\api\\\\debates\\\\[id]\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_webDev_Projects_live_ai_debate_arena_Incomplete_src_app_api_debates_id_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZkZWJhdGVzJTJGJTVCaWQlNUQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRlYmF0ZXMlMkYlNUJpZCU1RCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmRlYmF0ZXMlMkYlNUJpZCU1RCUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDd2ViRGV2JTIwUHJvamVjdHMlNUNsaXZlLWFpLWRlYmF0ZS1hcmVuYShJbmNvbXBsZXRlKSU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RCUzQSU1Q3dlYkRldiUyMFByb2plY3RzJTVDbGl2ZS1haS1kZWJhdGUtYXJlbmEoSW5jb21wbGV0ZSkmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQzZDO0FBQzFIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJEOlxcXFx3ZWJEZXYgUHJvamVjdHNcXFxcbGl2ZS1haS1kZWJhdGUtYXJlbmEoSW5jb21wbGV0ZSlcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcZGViYXRlc1xcXFxbaWRdXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kZWJhdGVzL1tpZF0vcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kZWJhdGVzL1tpZF1cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2RlYmF0ZXMvW2lkXS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkQ6XFxcXHdlYkRldiBQcm9qZWN0c1xcXFxsaXZlLWFpLWRlYmF0ZS1hcmVuYShJbmNvbXBsZXRlKVxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxkZWJhdGVzXFxcXFtpZF1cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdebates%2F%5Bid%5D%2Froute&page=%2Fapi%2Fdebates%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdebates%2F%5Bid%5D%2Froute.ts&appDir=D%3A%5CwebDev%20Projects%5Clive-ai-debate-arena(Incomplete)%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CwebDev%20Projects%5Clive-ai-debate-arena(Incomplete)&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/debates/[id]/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/debates/[id]/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   PATCH: () => (/* binding */ PATCH),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n\n\nasync function GET(request, { params }) {\n    try {\n        const debate = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.debate.findUnique({\n            where: {\n                id: params.id\n            },\n            include: {\n                proUser: true,\n                conUser: true,\n                creator: true,\n                messages: {\n                    orderBy: {\n                        createdAt: \"asc\"\n                    },\n                    include: {\n                        sender: true\n                    }\n                }\n            }\n        });\n        if (!debate) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Debate not found\"\n            }, {\n                status: 404\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(debate);\n    } catch (error) {\n        console.error(\"Error fetching debate:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request, { params }) {\n    let userId;\n    let action;\n    try {\n        const body = await request.json();\n        userId = body.userId;\n        action = body.action;\n        const { joinCode } = body;\n        if (!userId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.user.findUnique({\n            where: {\n                clerkId: userId\n            }\n        });\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User not found\"\n            }, {\n                status: 404\n            });\n        }\n        const debate = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.debate.findUnique({\n            where: {\n                id: params.id\n            }\n        });\n        if (!debate) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Debate not found\"\n            }, {\n                status: 404\n            });\n        }\n        let updatedDebate;\n        if (action === \"join_con\") {\n            if (debate.status !== \"waiting\") {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Cannot join: Debate is not open for joining.\"\n                }, {\n                    status: 400\n                });\n            }\n            if (debate.proUserId === user.id || debate.conUserId === user.id) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"You are already a participant in this debate.\"\n                }, {\n                    status: 400\n                });\n            }\n            if (!joinCode || joinCode !== debate.joinCodeCon) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Invalid join code for Con position\"\n                }, {\n                    status: 400\n                });\n            }\n            if (debate.conUserId) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Con position already taken\"\n                }, {\n                    status: 400\n                });\n            }\n            updatedDebate = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.debate.update({\n                where: {\n                    id: params.id\n                },\n                data: {\n                    conUserId: user.id,\n                    status: debate.proUserId ? \"in-progress\" : \"waiting\"\n                },\n                include: {\n                    proUser: true,\n                    conUser: true,\n                    creator: true\n                }\n            });\n        } else if (action === \"end\") {\n            if (debate.status === \"completed\") {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Debate is already completed.\"\n                }, {\n                    status: 400\n                });\n            }\n            // Only allow pro, con, or creator to end the debate\n            const allowedUserIds = [\n                debate.proUserId,\n                debate.conUserId,\n                debate.creatorId\n            ];\n            if (!allowedUserIds.includes(user.id)) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"You are not authorized to end this debate.\"\n                }, {\n                    status: 403\n                });\n            }\n            // Require at least 4 messages before scoring\n            const messageCount = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.message.count({\n                where: {\n                    debateId: debate.id\n                }\n            });\n            if (messageCount < 4) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Debate must have at least 4 messages before it can be ended and scored.\"\n                }, {\n                    status: 400\n                });\n            }\n            updatedDebate = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.debate.update({\n                where: {\n                    id: params.id\n                },\n                data: {\n                    status: \"completed\"\n                },\n                include: {\n                    proUser: true,\n                    conUser: true,\n                    creator: true,\n                    messages: {\n                        orderBy: {\n                            createdAt: \"asc\"\n                        },\n                        include: {\n                            sender: true\n                        }\n                    }\n                }\n            });\n            if (updatedDebate.proUser && updatedDebate.conUser) {\n                const existingScores = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.score.findMany({\n                    where: {\n                        debateId: updatedDebate.id,\n                        userId: {\n                            in: [\n                                updatedDebate.proUser.id,\n                                updatedDebate.conUser.id\n                            ]\n                        }\n                    }\n                });\n                const scoredUserIds = existingScores.map((s)=>s.userId);\n                // Build transcript for AI\n                const transcript = updatedDebate.messages.map((msg)=>`${msg.sender.username} (${msg.role}): ${msg.content}`).join(\"\\n\");\n                const debateTopic = updatedDebate.topic;\n                let aiScores = null;\n                try {\n                    const prompt = `\\n    Analyze this debate transcript and provide detailed feedback on both participants' performance.\\n    \\n    Debate Topic: ${debateTopic}\\n    \\n    Transcript:\\n    ${transcript}\\n    \\n    Provide feedback in the following format for each participant:\\n    1. Argument Structure (1-10): Score and detailed analysis\\n    2. Logical Consistency (1-10): Score and detailed analysis\\n    3. Persuasiveness (1-10): Score and detailed analysis\\n    4. Tone and Delivery (1-10): Score and detailed analysis\\n    5. Overall Effectiveness (1-10): Score and summary\\n    \\n    Also provide 3 specific suggestions for improvement for each participant.\\n    `;\n                    const response = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Authorization\": `Bearer ${process.env.OPENROUTER_API_KEY}`,\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            model: \"openai/gpt-4\",\n                            messages: [\n                                {\n                                    role: \"user\",\n                                    content: prompt\n                                }\n                            ],\n                            temperature: 0.7,\n                            max_tokens: 1500\n                        })\n                    });\n                    const data = await response.json();\n                    const analysis = data.choices?.[0]?.message?.content;\n                    // Parse scores for pro and con from analysis (simple regex-based extraction)\n                    if (analysis) {\n                        aiScores = {\n                            pro: {},\n                            con: {}\n                        };\n                        // Try to extract scores for each participant\n                        const proMatch = analysis.match(/pro.*?(\\d{1,2})[^\\d]+(\\d{1,2})[^\\d]+(\\d{1,2})[^\\d]+(\\d{1,2})/i);\n                        const conMatch = analysis.match(/con.*?(\\d{1,2})[^\\d]+(\\d{1,2})[^\\d]+(\\d{1,2})[^\\d]+(\\d{1,2})/i);\n                        // Fallback: try to extract all numbers in order\n                        const allScores = Array.from(analysis.matchAll(/(\\d{1,2})/g)).map((m)=>parseInt(m[1]));\n                        if (proMatch && proMatch.length >= 5) {\n                            aiScores.pro = {\n                                logic: Number(proMatch[1]),\n                                clarity: Number(proMatch[2]),\n                                persuasiveness: Number(proMatch[3]),\n                                tone: Number(proMatch[4])\n                            };\n                        } else if (allScores.length >= 4) {\n                            aiScores.pro = {\n                                logic: allScores[0],\n                                clarity: allScores[1],\n                                persuasiveness: allScores[2],\n                                tone: allScores[3]\n                            };\n                        }\n                        if (conMatch && conMatch.length >= 5) {\n                            aiScores.con = {\n                                logic: Number(conMatch[1]),\n                                clarity: Number(conMatch[2]),\n                                persuasiveness: Number(conMatch[3]),\n                                tone: Number(conMatch[4])\n                            };\n                        } else if (allScores.length >= 8) {\n                            aiScores.con = {\n                                logic: allScores[4],\n                                clarity: allScores[5],\n                                persuasiveness: allScores[6],\n                                tone: allScores[7]\n                            };\n                        }\n                    }\n                } catch (err) {\n                    // Fallback to static scores if AI fails\n                    aiScores = null;\n                }\n                // Save scores for pro and con\n                const proScore = aiScores?.pro || {\n                    logic: 7,\n                    clarity: 8,\n                    persuasiveness: 7,\n                    tone: 8\n                };\n                const conScore = aiScores?.con || {\n                    logic: 7,\n                    clarity: 8,\n                    persuasiveness: 7,\n                    tone: 8\n                };\n                if (!scoredUserIds.includes(updatedDebate.proUser.id)) {\n                    await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.score.create({\n                        data: {\n                            ...proScore,\n                            userId: updatedDebate.proUser.id,\n                            debateId: updatedDebate.id\n                        }\n                    });\n                }\n                if (!scoredUserIds.includes(updatedDebate.conUser.id)) {\n                    await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.score.create({\n                        data: {\n                            ...conScore,\n                            userId: updatedDebate.conUser.id,\n                            debateId: updatedDebate.id\n                        }\n                    });\n                }\n            }\n        } else {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid action\"\n            }, {\n                status: 400\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(updatedDebate);\n    } catch (error) {\n        console.error(\"Error updating debate:\", {\n            error,\n            userId,\n            debateId: params.id,\n            action\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function DELETE(request, { params }) {\n    try {\n        const { userId } = await request.json();\n        if (!userId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.user.findUnique({\n            where: {\n                clerkId: userId\n            }\n        });\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User not found\"\n            }, {\n                status: 404\n            });\n        }\n        const debate = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.debate.findUnique({\n            where: {\n                id: params.id\n            },\n            include: {\n                proUser: true,\n                conUser: true,\n                creator: true\n            }\n        });\n        if (!debate) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Debate not found\"\n            }, {\n                status: 404\n            });\n        }\n        // Only allow the debate creator (pro user) to delete\n        if (debate.proUserId !== user.id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Only the debate creator can delete this debate\"\n            }, {\n                status: 403\n            });\n        }\n        // Delete related data first (cascade delete)\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction([\n            // Delete messages\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.message.deleteMany({\n                where: {\n                    debateId: params.id\n                }\n            }),\n            // Delete scores\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.score.deleteMany({\n                where: {\n                    debateId: params.id\n                }\n            }),\n            // Delete votes\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.vote.deleteMany({\n                where: {\n                    debateId: params.id\n                }\n            }),\n            // Delete the debate\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.debate.delete({\n                where: {\n                    id: params.id\n                }\n            })\n        ]);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true\n        });\n    } catch (error) {\n        console.error(\"Error deleting debate:\", {\n            error,\n            debateId: params.id\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PATCH(request, { params }) {\n    let userId;\n    let action;\n    try {\n        const body = await request.json();\n        userId = body.userId;\n        action = body.action;\n        if (!userId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.user.findUnique({\n            where: {\n                clerkId: userId\n            }\n        });\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User not found\"\n            }, {\n                status: 404\n            });\n        }\n        const debate = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.debate.findUnique({\n            where: {\n                id: params.id\n            },\n            include: {\n                proUser: true,\n                conUser: true,\n                creator: true\n            }\n        });\n        if (!debate) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Debate not found\"\n            }, {\n                status: 404\n            });\n        }\n        // Only allow debate creator to remove participants\n        if (debate.proUserId !== user.id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Only the debate creator can remove participants\"\n            }, {\n                status: 403\n            });\n        }\n        let updatedDebate;\n        if (action === \"remove_pro\") {\n            if (!debate.proUser) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"No Pro participant to remove\"\n                }, {\n                    status: 400\n                });\n            }\n            // Cannot remove pro user as they are the creator and required\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Cannot remove the Pro participant as they are the debate creator\"\n            }, {\n                status: 400\n            });\n        } else if (action === \"remove_con\") {\n            if (!debate.conUser) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"No Con participant to remove\"\n                }, {\n                    status: 400\n                });\n            }\n            updatedDebate = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.debate.update({\n                where: {\n                    id: params.id\n                },\n                data: {\n                    conUserId: null,\n                    status: \"waiting\"\n                },\n                include: {\n                    proUser: true,\n                    conUser: true,\n                    creator: true\n                }\n            });\n        } else {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid action\"\n            }, {\n                status: 400\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(updatedDebate);\n    } catch (error) {\n        console.error(\"Error updating debate:\", {\n            error,\n            userId,\n            debateId: params.id,\n            action\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function OPTIONS() {\n    return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PATCH, DELETE, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/debates/[id]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log: [\n        \"query\"\n    ]\n});\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFFOUMsTUFBTUMsa0JBQWtCQztBQUlqQixNQUFNQyxTQUNYRixnQkFBZ0JFLE1BQU0sSUFDdEIsSUFBSUgsd0RBQVlBLENBQUM7SUFDZkksS0FBSztRQUFDO0tBQVE7QUFDaEIsR0FBRztBQUVMLElBQUlDLElBQXFDLEVBQUVKLGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiRDpcXHdlYkRldiBQcm9qZWN0c1xcbGl2ZS1haS1kZWJhdGUtYXJlbmEoSW5jb21wbGV0ZSlcXHNyY1xcbGliXFxwcmlzbWEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSBcIkBwcmlzbWEvY2xpZW50XCI7XHJcblxyXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xyXG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHByaXNtYSA9XHJcbiAgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/P1xyXG4gIG5ldyBQcmlzbWFDbGllbnQoe1xyXG4gICAgbG9nOiBbXCJxdWVyeVwiXSxcclxuICB9KTtcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7Il0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsImdsb2JhbEZvclByaXNtYSIsImdsb2JhbFRoaXMiLCJwcmlzbWEiLCJsb2ciLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fdebates%2F%5Bid%5D%2Froute&page=%2Fapi%2Fdebates%2F%5Bid%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdebates%2F%5Bid%5D%2Froute.ts&appDir=D%3A%5CwebDev%20Projects%5Clive-ai-debate-arena(Incomplete)%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CwebDev%20Projects%5Clive-ai-debate-arena(Incomplete)&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();