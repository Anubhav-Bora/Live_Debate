generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  clerkId        String      @unique
  username       String      @unique
  email          String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  debatesCon     Debate[]    @relation("ConUser")
  debatesCreated Debate[]    @relation("Creator")
  debatesJudged  Debate[]    @relation("Judge")
  debatesPro     Debate[]    @relation("ProUser")
  messages       Message[]
  scores         Score[]
  UserBadge      UserBadge[]
  Vote           Vote[]
}

model Debate {
  id            String    @id @default(cuid())
  topic         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  duration      Int       @default(180)
  status        String    @default("waiting")
  joinCodeCon   String    @unique
  joinCodeJudge String    @unique
  isPublic      Boolean   @default(true)
  creatorId     String
  proUserId     String
  conUserId     String?
  judgeId       String?
  conUser       User?     @relation("ConUser", fields: [conUserId], references: [id])
  creator       User      @relation("Creator", fields: [creatorId], references: [id])
  judge         User?     @relation("Judge", fields: [judgeId], references: [id])
  proUser       User      @relation("ProUser", fields: [proUserId], references: [id])
  messages      Message[]
  scores        Score[]
  Vote          Vote[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  role      String
  senderId  String
  debateId  String
  debate    Debate   @relation(fields: [debateId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

model Score {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  logic          Float
  clarity        Float
  persuasiveness Float
  tone           Float
  userId         String
  debateId       String
  debate         Debate   @relation(fields: [debateId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

model Badge {
  id          String      @id @default(cuid())
  name        String
  description String
  icon        String
  criteria    Json
  createdAt   DateTime    @default(now())
  users       UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, badgeId])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  debateId  String
  winner    String
  createdAt DateTime @default(now())
  debate    Debate   @relation(fields: [debateId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, debateId])
}
